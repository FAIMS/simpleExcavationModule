/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.CountDownLatch;

User user; // don't touch
String userid;

setSyncEnabled(true);
setFileSyncEnabled(true);

showWarning("Thanks for trying this module!", "We have provided this module for Demonstration purposes only. You can customise the module yourself or we can help you. Contact info@fedarch.org for help.");

/******************************************************************************/
/*                              MENU POPULATION                               */
/******************************************************************************/
/** Fetches the contents of a specifed vocabulary and stores it in the given list. **/
fetchVocab(String vocabName, List storageList) {
  fetchVocab(vocabName, storageList, null);
}
fetchVocab(String vocabName, List storageList, String callbackFunction) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      storageList.addAll(result);
      Log.d("fetchVocab()", "Fetched vocabulary \"" + vocabname + "\" contents: " + result.toString());
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
}

/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    String pictureGalleryQuery = "SELECT vocabid, vocabname, pictureurl "+
                                 "  FROM vocabulary "+
                                 "  LEFT OUTER JOIN attributekey USING (attributeid) "+
                                 " WHERE attributename = '" + attrib + "' "+
                                 " ORDER BY  vocabcountorder;";
    fetchAll(pictureGalleryQuery, new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalPictureGallery")) {
    populateHierarchicalPictureGallery(path, attrib);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    // populateHierarchicalDropDown(path, attrib);
    populateHierarchicalDropDown(path, attrib, true);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  String getAttributeVocabQuery = "SELECT vocabid, vocabname "+
                                  "  FROM vocabulary "+
                                  "  JOIN attributekey USING (attributeid) "+
                                  " WHERE attributename = '" + attrib + "' "+
                                  " ORDER BY vocabcountorder;";
  fetchAll(getAttributeVocabQuery,
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        Boolean hasNull =
                vocabExclusions == null
            || !vocabExclusions.contains("")
            && !vocabExclusions.contains(null);
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          // populateDropDown(path, result);
          populateDropDown(path, result, hasNull);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

/*** control ***/

onEvent("control/data", "show", "refreshEntities()");
onEvent("control/data", "load", "loadContextAttributes()");
onEvent("control/data", "load", "loadArtefactGroupAttributes();");
onEvent("control/data", "load", "loadSampleAttributes()");
onEvent("control/gps/connectexternal", "click", "startExternalGPS()");
onEvent("control/gps/connectinternal", "click", "startInternalGPS()");

/*** ArchEnt: Context ***/


refreshEntities() {
  showToast("Fetching saved contexts...");
  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateList("control/data/ContextList", result);
    }
  };
  fetchEntityList("Context", cb);
}


onEvent("Context/Context_Attachments/attachPhoto", "click", "attachPictureTo(\"Context/Context_Attachments/Photo\")");

onEvent("Context/Context_Attachments/Update", "delayclick", "saveContext()");
onEvent("Context/Context_Attachments/Delete", "delayclick", "deleteContext()");
onEvent("control/data/ContextList", "click", "loadContext()");
onEvent("control/data/newContext", "click", "newContext()");




onEvent("Context/Context_Attachments/attachSketch", "click", "attachFileTo(\"Context/Context_Attachments/Sketch\")");
onEvent("Context/Context_Attachments/viewattached", "click", "viewArchEntAttachedFiles(entityId)");


String context_id = null;

newContext(){
  context_id = null;
  newTabGroup("Context");
}

loadContextAttributes(){
  makeVocab("DropDown"             , "Context/Context_GeneralInformation/Context_Type" , "Context Type");
  makeVocab("HierarchicalDropDown" , "Context/Context_Deposits/Soil_Compaction_Type"   , "Soil Compaction Type");
  makeVocab("DropDown"             , "Context/Context_Deposits/Soil_Grain_Size"        , "Soil Grain Size");
  makeVocab("DropDown"             , "Context/Context_Deposits/Soil_Texture"           , "Soil Texture");
  makeVocab("DropDown"             , "Context/Context_Deposits/Soil_Particle_Sorting"  , "Soil Particle Sorting");
  makeVocab("HierarchicalDropDown" , "Context/Context_Deposits/Soil_Stone_Shape"       , "Soil Stone Shape");
  makeVocab("DropDown"             , "Context/Context_Deposits/Horizon_Boundary"       , "Horizon Boundary");
  makeVocab("DropDown"             , "Context/Context_Cuts/Shape_of_Cut"               , "Shape of Cut");
  makeVocab("RadioGroup"           , "Context/Context_Cuts/Shape_of_Corners"           , "Shape of Corners");
  makeVocab("RadioGroup"           , "Context/Context_Cuts/Break_of_Slope_Top"         , "Break of Slope - Top");
  makeVocab("RadioGroup"           , "Context/Context_Cuts/Break_of_slope_Base"        , "Break of slope - Base");
  makeVocab("HierarchicalDropDown" , "Context/Context_Cuts/Shape_of_Base"              , "Shape of Base");
  makeVocab("DropDown"             , "Context/Context_Cuts/Orientation"                , "Orientation");
}


saveContext() {
  if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
    showWarning("Logic Error", "Cannot save record without id");
    showTabGroup("Context");
    return;
  }

  //data = getCreatedGeometry();
  if (!isNull(context_id)) {
    entity = fetchArchEnt(context_id);
    //data = entity.getGeometryList();
  }
  // first null is map data

  SaveCallback cb = new SaveCallback() {
    onSave(uuid, newRecord) {
      context_id = uuid;
    }
  };
  //saveTabGroup("Context", context_id, data, null, "context_id = getLastSavedRecordId(); clearCreatedGeometry();");
  saveTabGroup("Context", context_id, null, null, cb);
}

deleteContext(){
  if (!isNull(context_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Context!", "reallyDeleteContext()", "doNotDelete()");
  }
}

reallyDeleteContext(){
    deleteArchEnt(context_id);
    cancelTabGroup("Context", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

loadContext() {
  //newContext();
  context_id = getListItemValue();
  loadContextFrom(context_id);
}

loadContextFrom(contextid) {
  //newContext();
  context_id = contextid;
  if (isNull(context_id)) return;
  showToast(context_id);
  showTabGroup("Context", context_id);
  updateAllContext();
  updateRelns();

}




/*** Artefact Group ***/
onEvent("Context/Context_Relationships_to_Other_Contexts/loadArtefactGroup", "click", "loadArtefactGroup()");
onEvent("Context/Context_Relationships_to_Other_Contexts/newArtefactGroup", "click", "newArtefactGroup()");

onEvent("Artefact_Group/Artefact_Group_GeneralInformation/Update", "delayclick", "saveArtefactGroup();");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/Delete", "delayclick", "deleteArtefactGroup()");

/*

onEvent("ArtefactGroup/ArtefactGroup_Attachments/attachPhoto", "click", "attachPictureTo(\"ArtefactGroup/ArtefactGroup_Attachments/Photo\")");



onEvent("control/data/ArtefactGroupList", "click", "loadArtefactGroup()");


//test

onEvent("ArtefactGroup/ArtefactGroup_Attachments/attachSketch", "click", "attachFileTo(\"ArtefactGroup/ArtefactGroup_Attachments/Sketch\")");
onEvent("ArtefactGroup/ArtefactGroup_Attachments/viewattached", "click", "viewArchEntAttachedFiles(entityId)");

*/
onEvent("Context/Context_Relationships_to_Other_Contexts", "show", "updateAllContext()");
onEvent("Context/Context_Relationships_to_Other_Contexts/relate", "delayclick", "makeHierReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/showReln", "click", "loadContextFromReln()");

loadContextFromReln(){
  String relnid = getFieldValue("Context/Context_Relationships_to_Other_Contexts/listRelns");    
  if (!isNull(relnid)){
    return;
  }

  String q = "select uuid from latestNonDeletedAentReln where relationshipID = '"+relnid+"' and uuid != '"+context_id+"';";
  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      if (isNull(result)) {
        return;
      }
      context_id = result.get(0);
      loadContextFrom(result.get(0));
    }
  };

  fetchOne(q, cb);
}
onEvent("Context/Context_Relationships_to_Other_Contexts/deleteReln", "delayclick", "deleteReln()");
deleteReln(){
  relnid = getFieldValue("Context/Context_Relationships_to_Other_Contexts/listRelns");

  String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) select uuid, relationshipid, 'true', participatesverb, '"+userid+"' from latestnondeletedaentreln where relationshipid = '"+relnid+"';";

  fetchOne(query);
  deleteRel(relnid);
  updateRelns();
}
updateAllContext(){
  String q = "select relntypename||'~!~'||coalesce(nullif(parent||'~!~'||child,'~!~'),relntypename||'~!~'||relntypename) as relntypeid, coalesce(nullif(parent,''), relntypename) as name, relntypeid from relntype where relntypename not like '%Context%' union select relntypename||'~!~'||coalesce(nullif(child||'~!~'||parent,'~!~'),relntypename||'~!~'||relntypename), coalesce(nullif(child,''), relntypename) as name, relntypeid from relntype where relntypename not like '%Context%' order by relntypeid, name;";
  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateDropDown("Context/Context_Relationships_to_Other_Contexts/reln", result);
    }
  };
  fetchAll(q, cb);

  if (isNull(context_id)){
    return;
  }
  CountDownLatch doneUpdating = new CountDownLatch(3);
  String q1;
  String q2;
  String q3;

  q1 = "select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
"  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
"            FROM latestNonDeletedArchentIdentifiers\n"+
"           WHERE aenttypename = 'Artefact Group'\n"+
"             AND uuid in (select uuid\n"+
"                            FROM latestNonDeletedAentReln\n"+
"                           where relationshipid in (select relationshipid\n"+
"                                                      FROM latestNonDeletedAentReln\n"+
"                                                      JOIN relationship using (relationshipid)\n"+
"                                                      JOIN relntype using (relntypeid)\n"+
"                                                     where uuid = "+context_id+"\n"+
"                                                       and relntypeName = 'ContextArtefactGroup')\n"+
"                             and uuid != "+context_id+")\n"+
"        ORDER BY uuid, attributename ASC)\n"+
"group by uuid\n"+
"order by valuetimestamp desc, uuid, attributename;";

  q2 = "select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
"  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
"            FROM latestNonDeletedArchentIdentifiers\n"+
"           WHERE aenttypename = 'Sample'\n"+
"             AND uuid in (select uuid\n"+
"                            FROM latestNonDeletedAentReln\n"+
"                           where relationshipid in (select relationshipid\n"+
"                                                      FROM latestNonDeletedAentReln\n"+
"                                                      JOIN relationship using (relationshipid)\n"+
"                                                      JOIN relntype using (relntypeid)\n"+
"                                                     where uuid = "+context_id+"\n"+
"                                                       and relntypeName = 'ContextSample')\n"+
"                             and uuid != "+context_id+")\n"+
"        ORDER BY uuid, attributename ASC)\n"+
"group by uuid\n"+
"order by valuetimestamp desc, uuid, attributename;";

  q3 = "select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response from latestNonDeletedArchEntIdentifiers where aenttypename = 'Context' and uuid != '"+context_id+"' group by uuid;";

  FetchCallback pop1 = new FetchCallback() {
    onFetch(result) {
      populateDropDown("Context/Context_Relationships_to_Other_Contexts/artefactGroup", result);
      doneUpdating.countDown();
    }
  };
  FetchCallback pop2 = new FetchCallback() {
    onFetch(result) {
      populateDropDown("Context/Context_Relationships_to_Other_Contexts/sample", result);
      doneUpdating.countDown();
    }
  };
  FetchCallback pop3 = new FetchCallback() {
    onFetch(result) {
      populateDropDown("Context/Context_Relationships_to_Other_Contexts/context", result);
      doneUpdating.countDown();
    }
  };
  fetchAll(q1, pop1);
  fetchAll(q2, pop2);
  fetchAll(q3, pop3);

  updateRelns(doneUpdating);
}

makeHierReln(){
  saveContext();

  if (isNull(context_id)){
    showToast("You must have saved your entity.");
    return;
  }
  String[] arguments = getFieldValue("Context/Context_Relationships_to_Other_Contexts/reln").split("~!~");
  String dest = getFieldValue("Context/Context_Relationships_to_Other_Contexts/context");


  //showToast(getFieldValue("Context/Context_GeneralInformation/Context_ID")+" is "+arguments[1]+" "+dest);



  saveEntitiesToHierRel(arguments[0], context_id, dest, arguments[1], arguments[2]);
  updateRelns();
}

updateRelns(){
  updateRelns(null);
}

updateRelns(CountDownLatch latch){
  String q =
      "select relationshipid, aenttypename || ' ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') || ' is ' || participatesVerb || ' "+getFieldValue("Context/Context_GeneralInformation/Context_ID")+"' as response, valuetimestamp, aentrelntimestamp "+
"  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename, participatesVerb, relationshipid,aentrelntimestamp "+
"            FROM latestNonDeletedArchentIdentifiers join latestNonDeletedAentReln using (uuid) "+
"           WHERE aenttypename = 'Context'  "+
"             AND uuid in (select uuid "+
"                            FROM latestNonDeletedAentReln  "+
"                           where relationshipid in (select relationshipid  "+
"                                                      FROM latestNonDeletedAentReln  "+
"                                                      JOIN relationship using (relationshipid)  "+
"                                                      JOIN relntype using (relntypeid)  "+
"                                                     where uuid = "+context_id+" "+
"                                                       and relntypeName not like '%Context%')  "+
"                             and uuid != "+context_id+")  "+        
"        ORDER BY uuid, attributename ASC "+
"        ) "+
"group by uuid, relationshipid order by aentrelntimestamp desc ; ";

  FetchCallback pop = new FetchCallback() {
    onFetch(result) {
      if (latch != null) {
        latch.await();
      }
      populateDropDown("Context/Context_Relationships_to_Other_Contexts/listRelns", result);
    }
  };
  fetchAll(q, pop);
}
String artefactgroup_id = null;

newArtefactGroup(){
  saveContext();
  artefactgroup_id = null;
  newTabGroup("Artefact_Group");

  setArtefactGroupAttributes();
}
setArtefactGroupAttributes(){
  setFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
  setFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Site_Code", getFieldValue("Context/Context_GeneralInformation/Site_Code"));
}
loadArtefactGroupAttributes(){
  populateHierarchicalDropDown("Artefact_Group/Artefact_Group_GeneralInformation/Artefact_Class", "Artefact Class");
}


saveArtefactGroup() {
  if (isNull(getFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Artefact_Group_ID"))) {
    showWarning("Logic Error", "Cannot save record without id");
    return;
  }

  //data = getCreatedGeometry();
  if (!isNull(artefactgroup_id)) {
    entity = fetchArchEnt(artefactgroup_id);
    //data = entity.getGeometryList();
  }
  // first null is map data

  if (isNull(context_id)) {
    showWarning("Logic Error", "Artefact Group cannot be saved as parent context is not saved or loaded.");
    return null;
  }

  SaveCallback cb = new SaveCallback() {
    onSave(uuid, newRecord) {
      artefactgroup_id = uuid;
      onArtefactGroupSaved();
    }
  };
  saveTabGroup("Artefact_Group", artefactgroup_id, null, null, cb);

  showTab("Context/Context_Relationships_to_Other_Contexts");
  //saveTabGroup("ArtefactGroup", artefactgroup_id, data, null, "artefactgroup_id = getLastSavedRecordId(); clearCreatedGeometry();");
}
onArtefactGroupSaved(){
  saveEntitiesToRel("ContextArtefactGroup", context_id, artefactgroup_id);
  showToast("Associated with Context");

}
deleteArtefactGroup(){
  if (!isNull(artefactgroup_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this ArtefactGroup!", "reallyDeleteArtefactGroup()", "doNotDelete()");
  }
}

reallyDeleteArtefactGroup(){
    deleteArchEnt(artefactgroup_id);
    cancelTabGroup("Artefact_Group", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

loadArtefactGroup() {
  //newArtefactGroup();
  artefactgroup_id = getFieldValue("Context/Context_Relationships_to_Other_Contexts/artefactGroup");
  if (isNull(artefactgroup_id)) return;
  showTabGroup("Artefact_Group", artefactgroup_id);

}




/*** Sample ***/
onEvent("Context/Context_Relationships_to_Other_Contexts/loadSample", "click", "loadSample()");

onEvent("Context/Context_Relationships_to_Other_Contexts/newSample", "click", "newSample()");

onEvent("Sample/Sample_GeneralInformation/Update", "delayclick", "saveSample()");
onEvent("Sample/Sample_GeneralInformation/Delete", "delayclick", "deleteSample()");

/*

onEvent("Sample/Sample_Attachments/attachPhoto", "click", "attachPictureTo(\"Sample/Sample_Attachments/Photo\")");



onEvent("control/data/SampleList", "click", "loadSample()");



onEvent("Sample/Sample_Attachments/attachSketch", "click", "attachFileTo(\"Sample/Sample_Attachments/Sketch\")");
onEvent("Sample/Sample_Attachments/viewattached", "click", "viewArchEntAttachedFiles(entityId)");

*/


String sample_id = null;


newSample(){
  saveContext();
  sample_id = null;
  newTabGroup("Sample");
    setSampleAttributes();


}

setSampleAttributes(){
  setFieldValue("Sample/Sample_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
  setFieldValue("Sample/Sample_GeneralInformation/Site_Code", getFieldValue("Context/Context_GeneralInformation/Site_Code"));
}
loadSampleAttributes(){
  makeVocab("RadioGroup", "Sample/Sample_GeneralInformation/Sample_Type",       "Sample Type");
  makeVocab("RadioGroup", "Sample/Sample_GeneralInformation/Collection_Method", "Collection Method");
}


saveSample() {
  if (isNull(getFieldValue("Sample/Sample_GeneralInformation/Sample_ID"))) {
    showWarning("Logic Error", "Cannot save record without id");
    return;
  }
  
  //data = getCreatedGeometry();
  if (!isNull(sample_id)) {
    entity = fetchArchEnt(sample_id);
    //data = entity.getGeometryList();
  }
  // first null is map data

  if (isNull(context_id)) {
      showWarning("Logic Error", "Sample cannot be saved as parent context is not saved or loaded.");
      return null;
  }

  SaveCallback cb = new SaveCallback() {
    onSave(uuid, newRecord) {
      sample_id = uuid;
      onSampleSaved();
    }
  };
  saveTabGroup("Sample", sample_id, null, null, cb);
  showTab("Context/Context_Relationships_to_Other_Contexts");
  //saveTabGroup("Sample", sample_id, data, null, "sample_id = getLastSavedRecordId(); clearCreatedGeometry();");
}
onSampleSaved(){
  saveEntitiesToRel("ContextSample", context_id, sample_id);
  showToast("Associated with Context");

}
deleteSample(){
  if (!isNull(sample_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Sample!", "reallyDeleteSample()", "doNotDelete()");
  }
}

reallyDeleteSample(){
    deleteArchEnt(sample_id);
    cancelTabGroup("Sample", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

loadSample() {
  //newSample();
  sample_id = getFieldValue("Context/Context_Relationships_to_Other_Contexts/sample");
  if (isNull(sample_id)) return;
  showTabGroup("Sample", sample_id);

}


/*** MISC ***/


saveEntitiesToRel(type, entity1, entity2) {
  if (isNull(entity1) || isNull(entity2)) return;
  
  rel_id = saveRel(null, type, null, null);
  addReln(entity1, rel_id, null);
  addReln(entity2, rel_id, null);
}



saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb) {
  if (isNull(entity1) || isNull(entity2)) return;
  
  rel_id = saveRel(null, type, null, null);
  addReln(entity1, rel_id, e1verb);
  addReln(entity2, rel_id, e2verb);
}


/*** 'Uneditable' - you can edit the code below with extreme precaution ***/

/*
initMap() {
  setMapZoom("control/map/map", 19.0f);

  //showBaseMap("control/map/map", "Base Layer", "files/data/maps/ZAG-TPan-3857-grass-tiled.tif");
  createCanvasLayer("control/map/map", "Non-saved sketch layer");

    DATA_ENTRY_LAYER_ID = createCanvasLayer("control/map/map", DATA_ENTRY_LAYER);

  isEntity = true;
  queryName = "All entities";
  querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEntIdentifiers";
    
  addDatabaseLayerQuery("control/map/map", queryName, querySQL);

  addTrackLogLayerQuery("control/map/map", "track log entities", 
    "SELECT uuid, max(aenttimestamp) as aenttimestamp\n" + 
    " FROM archentity join aenttype using (aenttypeid)\n" +
    " where archentity.deleted is null\n" + 
    "   and lower(aenttypename) = lower('gps_track')\n" + 
    " group by uuid\n" + 
    " having max(aenttimestamp)");
    
  addSelectQueryBuilder("control/map/map", "Select entity by type", createQueryBuilder(
    "select uuid\n" + 
    "  from latestNonDeletedArchent\n" + 
    "  JOIN latestNonDeletedAentValue using (uuid)\n" + 
    "  join aenttype using (aenttypeid)\n" + 
    "  LEFT OUTER JOIN vocabulary using (vocabid, attributeid) \n" + 
    "  where lower(aenttypename) = lower(?) \n" + 
    "   group by uuid").addParameter("Type", "RemoteSensingContext"));
    
  //addLegacySelectQueryBuilder("control/map/map", "Select geometry by id", "files/data/maps/sydney.sqlite", "Geology100_Sydney", 
  //  createLegacyQueryBuilder("Select PK_UID from Geology100_Sydney where PK_UID = ?").addParameter("ID", null));
          
  // define database layer styles for points, lines, polygons and text
  ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
  ls = createLineStyle(10, Color.GREEN, 0.05f, 0.3f, null);
  pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
  ts = createTextStyle(10, Color.WHITE, 40, Typeface.SANS_SERIF);

  showDatabaseLayer("control/map/map", "Saved Data Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);
}

initMap();
*/

/*** TRACKLOG ***/
/*
setGPSUpdateInterval(4);

onEvent("control/gps/startTimeLog", "click", "startTrackingGPS(\"time\", 10, \"saveTimeGPSTrack()\")");
onEvent("control/gps/startDistanceLog", "click", "startTrackingGPS(\"distance\", 10, \"saveDistanceGPSTrack()\")");
onEvent("control/gps/stopTrackLog", "click", "stopTrackingGPS()");

saveTimeGPSTrack() {
  List attributes = createAttributeList();
  attributes.add(createEntityAttribute("gps_type", "time", null, null, null));
  saveGPSTrack(attributes);
}

saveDistanceGPSTrack() {
  List attributes = createAttributeList();
  attributes.add(createEntityAttribute("gps_type", "distance", null, null, null));
  saveGPSTrack(attributes);
}

saveGPSTrack(List attributes) {
  position = getGPSPosition();
  if (position == null) return;

  //attributes.add(createEntityAttribute("gps_user", "" + user.getUserId(), null, null, null));
  attributes.add(createEntityAttribute("gps_timestamp", "" + getCurrentTime(), null, null, null));
  attributes.add(createEntityAttribute("gps_longitude", "" + position.getLongitude(), null, null, null));
  attributes.add(createEntityAttribute("gps_latitude", "" + position.getLatitude(), null, null, null));
  //attributes.add(createEntityAttribute("gps_heading", "" + getGPSHeading(), null, null, null));
  attributes.add(createEntityAttribute("gps_accuracy", "" + getGPSEstimatedAccuracy(), null, null, null));
  
  positionProj = getGPSPositionProjected();
  Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
  ArrayList l = new ArrayList();
  l.add(p);
  
  saveArchEnt(null, "gps_track", l, attributes);
}
*/
/*** USER ***/

populateListForUsers(){
  String q = "select userid, fname ||' ' || lname from user";
  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateList("user/usertab/users", result);
    }
  };

  fetchOne(q, cb);
}

populateListForUsers();

String username = "";
String device = "";

login(){
  String q = "select userid,fname,lname,email from user where userid='" + getListItemValue() + "';";
  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      if (isNull(result)) {
        return;
      }

      User user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
      userid = result.get(0);
      setUser(user);
      username = result.get(1) + " " + result.get(2);
      showTabGroup("control");
    }
  };

  fetchOne(q, cb);
}

onEvent("user/usertab/users", "click", "login()");

/*** SYNC ***/

onEvent("control/gps/startsync", "click", "startSync()");
onEvent("control/gps/stopsync", "click", "stopSync()");

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}
